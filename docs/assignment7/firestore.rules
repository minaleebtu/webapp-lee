rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents { // {database} clause indicates that these rules apply to all databases in Firestore

        match /{document=**} {
            // allow write: if request.auth.token.email_verified == true;
            allow read: if request.auth != null;

            allow delete: if request.auth.token.email_verified == true;
        }

        /*
         *  Ensembles
         */
        match /{ensembles}/{document=**} {
            allow create: if request.auth.token.email_verified == true
                 && request.resource.data.ensembleId != null ? checkEnsembleID(request.resource.data.ensembleId) : true
                 && request.resource.data.ensembleType != null ? checkEnsembleType(request.resource.data.ensembleType) : false
                 && request.resource.data.name != null ? checkEnsembleName(request.resource.data.name) : true;

            allow update: if request.auth.token.email_verified == true
                 && (request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['ensembleType', 'name', 'members', 'practicingLocation', 'practicingDate']))
                 && request.resource.data.ensembleType != null ? checkEnsembleType(request.resource.data.ensembleType) : false
                 && request.resource.data.name != null ? checkEnsembleName(request.resource.data.name) : false
                 && request.resource.data.practicingLocation != null ? checkPracticingLocation(request.resource.data.practicingLocation) : true;
            allow delete: if request.auth.token.email_verified == true;
        }

        function checkEnsembleID(id) {
            return
                !(exists(/databases/$(database)/documents/ensembles/$(ensembleId)))
                && id > -1;
        }

        function checkEnsembleType(type) {
            return
                !(exists(/databases/$(database)/documents/members/$(type)))
                && type.isString() && type.val().length > 0;
        }

        function checkEnsembleName(name) {
            return
                !(exists(/databases/$(database)/documents/members/$(name)))
                && name.isString() && name.val().length > 0;
        }

        function checkEnsemblePracticingLocation(practicingLocation) {
            return
                !(exists(/databases/$(database)/documents/members/$(practicingLocation)))
                && practicingLocation.isString() && practicingLocation.val().length > 0;
        }

        /*
         *  Members
         */
        match /{members}/{document=**} {
            allow create:
                if request.auth.token.email_verified == true
                && request.resource.data.memberId != null ? checkMemberID(request.resource.data.memberId) : false
                && request.resource.data.name != null ? checkMemberName(request.resource.data.name) : false
                && request.resource.data.mailAddress != null ? checkMemberMail(request.resource.data.mailAddress) : false
                ;

            allow update:
                if request.auth.token.email_verified == true
                && (request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['role', 'name', 'instrument', 'mailAddress']))
                && request.resource.data.name != null ? checkMemberName(request.resource.data.name) : false
                && request.resource.data.mailAddress != null  ? checkMemberMail(request.resource.data.mailAddress) : false
                ;

            allow delete:
                if request.auth.token.email_verified == true;
        }
        function checkMemberID(memberId) {
            return
                !(exists(/databases/$(database)/documents/members/$(memberId)))
                // && memberId > -1
                ;
        }

        function checkMemberName(name) {
            return
                !(exists(/databases/$(database)/documents/members/$(name)))
                // && name.val().length > 0
                ;
        }

        function checkMemberMail(mailAddress) {
            return
                !(exists(/databases/$(database)/documents/members/$(mailAddress)))
                // && mail.val().length > 0
                ;
        }

        /*
         *  Events
         */
        match /{events}/{document=**} {
            allow create: if request.auth.token.email_verified == true
                             && request.resource.data.eventId != null ? checkEventID(request.resource.data.eventId) : true
                             && request.resource.data.description != null ? checkEventDescription(request.resource.data.description) : true
                             && request.resource.data.personInCharge != null ? checkEventPersonInCharge(request.resource.data.personInCharge) : true
                             && request.resource.data.title != null ? checkEventTitle(request.resource.data.title) : false;

            allow update: if request.auth.token.email_verified == true
                             && (request.resource.data.diff(resource.data).affectedKeys()
                                 .hasOnly(['eventType', 'title', 'date', 'description', 'personInCharge', 'participants']))
                             && request.resource.data.title != null ? checkEventTitle(request.resource.data.title) : false
                             && request.resource.data.description != null ? checkEventDescription(request.resource.data.description) : true
                             && request.resource.data.date != null ? checkDate(request.resource.data.date) : true;
            allow delete: if request.auth.token.email_verified == true;
        }
        function checkEventID(id) {
            return
                !(exists(/databases/$(database)/documents/events/$(eventId)))
                && id > -1;
        }

        function checkDate(date) {
            return true;
        }

        function checkEventTitle(title) {
            return
                !(exists(/databases/$(database)/documents/members/$(title)))
                && title.isString() && title.val().length > 0;
        }

        function checkEventDescription(description) {
            return
                !(exists(/databases/$(database)/documents/members/$(description)))
                && description.isString() && description.val().length > 0;
        }

        function checkEventPersonInCharge(personInCharge) {
            return
                !(exists(/databases/$(database)/documents/members/$(personInCharge)))
                && personInCharge.isString() && personInCharge.val().length > 0;
        }

    }
}